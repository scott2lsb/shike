package com.yshow.shike.activities;
import java.util.ArrayList;
import com.yshow.shike.R;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.yshow.shike.entity.Question_Bank;
import com.yshow.shike.entity.SkMessage_Res;
import com.yshow.shike.entity.SkMessage_Voice;
import com.yshow.shike.utils.Delete_Ques_Utile;
import com.yshow.shike.utils.Dialog;
import com.yshow.shike.utils.Net_Servse;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;

/**
 * 某个题库的题板页面,可以添加新的图片
 */
public class Activity_File_Three extends Activity {
	private boolean flag = false;
	private String questionId;
	private ViewPager vp_file_three;
	private Context context;
	private ImageLoader imageLoader;
	private DisplayImageOptions options;
	private Question_Bank bank;
	@SuppressWarnings("rawtypes")
	private MyViewPager myViewPager;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_file_three);
		context = this;
		options = Net_Servse.getInstence().Picture_Shipei(R.drawable.xiaoxi_moren);
		imageLoader = ImageLoader.getInstance();
		initData();
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void initData() {
		vp_file_three = (ViewPager) findViewById(R.id.vp_file_three);
		findViewById(R.id.tv_file__back).setOnClickListener(listener);
		findViewById(R.id.tv_file_add).setOnClickListener(listener);
		findViewById(R.id.tv_file_dele).setOnClickListener(listener);
		findViewById(R.id.tv_file_comf).setOnClickListener(listener);
		Bundle bundle = getIntent().getExtras();
//		String time_mark = bundle.getString("time_mark");
		bank = (Question_Bank) bundle.getSerializable("Question_Bank");
		ArrayList<SkMessage_Res> TiMulist = bank.getRes();
		if (TiMulist != null) {
			myViewPager = new MyViewPager(TiMulist);
			vp_file_three.setAdapter(myViewPager);
			vp_file_three.setCurrentItem(TiMulist.size() - 1);
		}
	}
	private OnClickListener listener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.tv_file__back:
				finish();
				break;
			case R.id.tv_file_dele:
				flag = !flag;
				myViewPager.notifyDataSetChanged();
				break;
			case R.id.tv_file_add://这地方有问题.不能直接就跳转到绘制页面.导致一篇空白
				Dialog.Intent(context, Stu_Paint_Activity.class);
				break;
			case R.id.tv_file_comf:
				int currentItem = vp_file_three.getCurrentItem();
				View view = myViewPager.instantiateItem(vp_file_three,currentItem);
				ImageView image = (ImageView) view.findViewById(R.id.iv_three_item);
				Drawable drawable = image.getDrawable();
				BitmapDrawable bd = (BitmapDrawable) drawable;
				Bitmap bitmap = bd.getBitmap();
				Bitmap compress_bitmap = Dialog.scaleImg(bitmap, 340, 340);
				Bundle bundle = new Bundle();
				bundle.putSerializable("Question_Bank", bank);
				bundle.putParcelable("bitmap", compress_bitmap);
				bundle.putString("questionId", questionId);
				Dialog.intent(context, Activity_File_four.class, bundle);
				break;
			}
		}
	};
	class MyViewPager<T> extends PagerAdapter {
		ArrayList<T> list;
//		private int mChildCount = 0;
		public MyViewPager(ArrayList<T> list) {
			super();
			this.list = list;
		}
		@Override
		public void notifyDataSetChanged() {
//			mChildCount = getCount();
			super.notifyDataSetChanged();
		}
		@Override
		public int getCount() {
			return list.size();
		}
		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == arg1;
		}
		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			((ViewPager)container).removeView((View) object);
		}
		@Override
		public int getItemPosition(Object object) {
			return POSITION_NONE;
		}
		@Override
		public View instantiateItem(ViewGroup container, final int position) {
			ArrayList<SkMessage_Voice> voicelist = bank.getRes().get(position).getVoice();
			String file = bank.getRes().get(position).getFile();
			View view = View.inflate(context,R.layout.activity_file_three_item, null);
			ImageView iv_three_item = (ImageView) view.findViewById(R.id.iv_three_item);
			ImageView iv_three_delete = (ImageView) view.findViewById(R.id.iv_three_delete);
			if (flag) {
				iv_three_delete.setVisibility(View.VISIBLE);
				iv_three_delete.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View arg0) {
					  String id = bank.getRes().get(position).getId();
					  Delete_Ques_Utile.getIntence().Delete_Res(context, id,list,position,myViewPager);
					}
				});
			} else {
				iv_three_delete.setVisibility(View.GONE);
			}
			GridView gv_void_item = (GridView) view.findViewById(R.id.gv_void_item);
			gv_void_item.setAdapter(new MyBasAdapter(voicelist));
			imageLoader.displayImage(file, iv_three_item, options);
			container.addView(view);
			return view;
		}
	}
	class MyBasAdapter extends BaseAdapter {
		ArrayList<SkMessage_Voice> voicelist;
		public MyBasAdapter(ArrayList<SkMessage_Voice> voicelist) {
			super();
			this.voicelist = voicelist;
		}
		@Override
		public int getCount() {
			return voicelist.size();
		}
		@Override
		public Object getItem(int arg0) {
			return voicelist.get(arg0);
		}
		@Override
		public long getItemId(int arg0) {
			return arg0;
		}
		@Override
		public View getView(int arg0, View arg1, ViewGroup arg2) {
			View view = View.inflate(context,R.layout.activity_que_board2_item, null);
			return view;
		}
	}
}
