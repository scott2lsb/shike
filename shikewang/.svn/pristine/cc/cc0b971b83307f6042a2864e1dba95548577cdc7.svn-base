package com.yshow.shike.utils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import android.graphics.Bitmap;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;
import com.loopj.android.http.SyncHttpClient;
import com.yshow.shike.entity.SKStudent;
import com.yshow.shike.entity.Update_User_Info;
/**
 * 鑱旂綉宸ュ叿
 */
public class SKAsyncApiController {
	private static String SHIKE_VALUE_API_SERVER_URL = "http://apitest.shikeke.com/";
	public static AsyncHttpClient client = new AsyncHttpClient();
	public static SyncHttpClient clientSync = new SyncHttpClient() {
		@Override
		public String onRequestFailed(Throwable arg0, String arg1) {
			// 杩欓噷瀹氫箟濡傛灉澶辫触灏辫繑锟?1
			return "-1";
		}
	};
	private static void myPost(String url, RequestParams params,
			AsyncHttpResponseHandler handler) {
		client.post(getAbsoluteUrl(url), params, handler);
	}
	private static void myGet(String url, RequestParams params,
			AsyncHttpResponseHandler handler) {
		client.get(getAbsoluteUrl(url), params, handler);
	}
	private static String getAbsoluteUrl(String url) {
		return SHIKE_VALUE_API_SERVER_URL + url.trim();
	}
	// 鐧诲綍
	public static void skLogin(String account, String password,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("account", account);
		params.put("password", password);
		myPost("?m=login&a=login&os=android", params, handler);
	}
	// 娉ㄥ唽瀛︾敓
	public static void skRegister(SKStudent stud,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("name", stud.getName());
		params.put("nickname", stud.getNickname());
		params.put("aId", stud.getaId());
		params.put("vcodeRes", stud.getVcodeRes());
		params.put("info", stud.getInfo());
		params.put("mob", stud.getMob());
		params.put("email", stud.getEmail());
		params.put("pwd", stud.getPwd());
		params.put("types", stud.getTypes());
		params.put("gradeId", stud.getGradeId());
		myPost("/?m=register", params, handler);
	}
	// 娑堟伅瀹屾垚鍚?娉ㄥ唽
	public static void Auto_Save_Info(SKStudent stud,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("name", stud.getName());
		params.put("nickname", stud.getNickname());
		params.put("aId", stud.getaId());
		params.put("vcodeRes", stud.getVcodeRes());
		params.put("info", stud.getInfo());
		params.put("mob", stud.getMob());
		params.put("email", stud.getEmail());
		params.put("pwd", stud.getPwd());
		params.put("types", stud.getTypes());
		params.put("gradeId", stud.getGradeId());
		myPost("?m=update_user_info", params, handler);
	}

	// 娉ㄥ唽鑰佸笀
	public static void skRegister_Teather(SKStudent stud,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("name", stud.getName());
		params.put("icon", stud.getIcon());
		params.put("nickname", stud.getNickname());
		params.put("aId", stud.getaId());
		params.put("vcodeRes", stud.getVcodeRes());
		params.put("info", stud.getInfo());
		params.put("Paper", stud.getPaper());
		params.put("mob", stud.getMob());
		params.put("email", stud.getEmail());
		params.put("pwd", stud.getPwd());
		params.put("types", stud.getTypes());
		params.put("subjectId", stud.getSubject());
		params.put("fromGradeId", stud.getFromGradeId());
		params.put("toGradeId", stud.getToGradeId());
		myPost("/?m=register", params, handler);
	}

	// 鑾峰彇楠岃瘉鐮?
	public static void skGetVcode(String mob, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("mob", mob);
		myPost("?m=vcode", params, handler);
	}

	// 鑾峰彇淇敼瀵嗙爜鐨勯獙璇佺爜
	public static void getPassword(String mob, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("mob", mob);
		myPost("?m=get_password", params, handler);
	}

	// 鑾峰彇骞寸骇
	public static void skGetGrade(AsyncHttpResponseHandler handler) {
		myGet("?m=grade", null, handler);
	}

	// 鑾峰彇鍦板尯
	public static void skGetArea(AsyncHttpResponseHandler handler) {
		myGet("?m=area", null, handler);
	}

	// 鑾峰彇瀛︾
	public static void skGetSubjeck(AsyncHttpResponseHandler handler) {
		myGet("?m=subject", null, handler);
	}

	// 鑾峰彇瀛︾
	public static void skGetJieDuan(AsyncHttpResponseHandler handler) {
		myGet("?m=subject", null, handler);
	}

	// 鑾峰彇娑堟伅
	public static void skGetMessage(int page, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("page", page + "");
		myGet("?m=get_messge", params, handler);
	}
	// 鑾峰彇鏂版秷锟?
	public static void skGetNewMessage(AsyncHttpResponseHandler handler) {
		myGet("?m=new_messge", null, handler);
	}
	// 鍒涘缓棰樼洰
	public static void skCreateQuestion(String subjectId,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("subjectId", subjectId);
		myGet("?m=question", params, handler);
	}
	// 鑾峰彇瀛︾
	public static void skGetSubject(AsyncHttpResponseHandler handler) {
		myGet("?m=subject ", null, handler);
	}
	// 鑾峰彇鎴戠殑鑰佸笀
	public static void skGetMyTeacher(AsyncHttpResponseHandler handler) {
		myGet("?m=myteacher", null, handler);
	}
	// 涓婁紶鍥剧墖
	public static void skUploadImage(String questionId, Bitmap bitmap,
			AsyncHttpResponseHandler handler) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
		InputStream isBm = new ByteArrayInputStream(baos.toByteArray());
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		params.put("file", isBm, questionId + ".png");
		myPost("?m=do_question", params, handler);
	}
	// 涓婁紶MP3
	public static void skUploadMp3(String questionId, String imgid,
			String path, String posID, AsyncHttpResponseHandler handler) {
		try {
			FileInputStream fileInputStream = new FileInputStream(path);
			RequestParams params = new RequestParams();
			params.put("questionId", questionId);
			params.put("imgid", imgid);
			params.put("file", fileInputStream, questionId + "_" + posID+ ".amr");
			myPost("?m=do_question", params, handler);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	// 鍙戞秷
	public static void skSend_messge(String questionId, String teachUid,
			String confirm, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		params.put("teachUid", teachUid);
		params.put("confirm", confirm);
		myPost("?m=send_messge", params, handler);
	}

	// 鏄庢槦鑰佸笀
	public static void start_teather(String subjectId, String aId, int page,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("subjectId", subjectId);
		params.put("aId", aId);
		params.put("page", "" + page);
		myPost("?m=top_teacher&a=star", params, handler);
	}

	// 鍒犻櫎娑堟伅
	// 鍙傛暟锛歮essge_id
	public static void skDel_messge(String messge_id,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("messge_id", messge_id);
		myPost("?m=messge_id", params, handler);
	}

	// 娑堟伅閲嶅彂
//	public static void skTry_messge(String questionId, String teachUid,
//			String confirm, AsyncHttpResponseHandler handler) {
//		RequestParams params = new RequestParams();
//		params.put(questionId, questionId);
//		params.put(teachUid, teachUid);
//		myPost("?m=try_messge", params, handler);
//	}
	public static void ChongFa(String questionId, String teachUid,
		AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		params.put("teachUid", teachUid);
		myGet("?m=try_messge", params, handler);
	}
	// 鎾ら攢鎻愰棶
	// 鍙傛暟锛歲uestionId
	public static void skCancel_messge(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("?m=cancel_messge", params, handler);
	}

	// 瀹屾垚娑堟伅
	// 鍙傛暟锛歲uestionId
	public static void skDonemessge(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("?m=done_messge", params, handler);
	}

	// 鍏虫敞鑰佸笀
	public static void Attention_Taeather_Parse(String uid,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("uid", uid);
		myGet("?m=fans", params, handler);
	}

	// 鎴戠殑鑰佸笀
	public static void My_Taeather_Parse(AsyncHttpResponseHandler handler) {
		myGet("?m=myteacher", null, handler);
	}

	// 鎺ㄨ崘鑰佸笀
	public static void recommend_teather(String subjectId, String aId,
			String page, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("subjectId", subjectId);
		params.put("aId", aId);
		params.put("page", page);
		myPost("?m=top_teacher&a=recommend", params, handler);
	}

	// 鎴戠殑甯堣
	public static void User_Info(String uid, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("uid", uid);
		myGet("?m=user_info", params, handler);
	}
	// 鎴戠殑甯堣2
//	public static void User_Info2(String uid, AsyncHttpResponseHandler handler) {
//		RequestParams params = new RequestParams();
//		params.put("uid", uid);
//		myPost("?m=user_info", params, handler);
//	}
	public void getBitmap(String urlStr, File file) {
		try {
			URL url = new URL(urlStr);
			HttpURLConnection urlCon = (HttpURLConnection) url.openConnection();
			urlCon.setRequestMethod("GET");
			urlCon.setDoInput(true);
			urlCon.connect();
			InputStream inputStream = urlCon.getInputStream();
			@SuppressWarnings("resource")
			FileOutputStream outputStream = new FileOutputStream(file);
			byte buffer[] = new byte[1024];
			int bufferLength = 0;
			while ((bufferLength = inputStream.read(buffer)) > 0) {
				outputStream.write(buffer, 0, bufferLength);
			}
			outputStream.flush();
		} catch (Exception e) {
			e.printStackTrace();
			if (file != null) {
				file.delete();
			}
		}
	}

	// 鎶曡瘔鑰佸笀
	public static void Complaint_Teather(String teacheld, String questionId,
			String contents, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("teacheld", teacheld);
		params.put("questionId", questionId);
		params.put("contents", contents);
		myPost("?m=complain", params, handler);
	}

	public static void Award_Points_Teather(String teacheld, String questionId,
			String points, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("teacheld", teacheld);
		params.put("questionId", questionId);
		params.put("contents", points);
		myPost("/?m=gift2points", params, handler);
	}

	// 鑰佸笀绔帴鏀堕锟?
	public static void Teather_Reception(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("?m=accept_task", params, handler);
	}
	// 鎰熻阿鑰佸笀 鑾峰彇琛ㄦ儏
	public static void Think_Teather(AsyncHttpResponseHandler handler) {
		myPost("?m=face_list", null, handler);
	}
	// 鎰熻阿鑰佸笀2
	public static void Think_Teather2(String questionId, String tea_uid,
			String points, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		params.put("teacheId", tea_uid);
		params.put("points", points);
		myPost("?m=gift2points", params, handler);
	}
	// 鑾峰彇gif鍥剧墖
	public static void Gain_Gif(AsyncHttpResponseHandler handler) {
		myPost("?m=gift_face_list", null, handler);
	}
	/**
	 * 缁欒€佸笀鍙戦€佹劅璋㈣〃鎯?
	 */
	public static void Send_Fase(String fileId, String questionId,AsyncHttpResponseHandler handler) {
		RequestParams param = new RequestParams();
		param.put("fileId", fileId);
		param.put("questionId", questionId);
		myPost("/?m=send_face", param, handler);
	}
	// 鎶曡瘔鑰佸笀
	public static void Complain_Teather(String questionId, String claim_uid,
			String contents, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		params.put("teacheId", claim_uid);
		params.put("contents", contents);
		myPost("?m=complain", params, handler);
	}

	// 缁欙拷?甯堝彂琛ㄦ儏
	public static void Give_Teather_picture(String fileId, String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("fileId", fileId);
		params.put("questionId", questionId);
		myPost("?m=send_face", params, handler);
	}

	// 纭畾璇ヨ涪宸茬粡缁撴潫
	public static void Topic_End(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("?m=done_messge", params, handler);
	}

	// 鑾峰彇棰樺簱鏁版嵁
	public static void Gain_Data(AsyncHttpResponseHandler handler) {
		myGet("?m=lib", null, handler);
	}

	// 鎰忚鍙嶉
	public static void Feed_Back(String contents,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("contents", contents);
		myPost("?m=feedback", params, handler);
	}

	// 鍔熻兘浠嬬粛
	public static void Function_Introduce(AsyncHttpResponseHandler handler) {
		myPost("/?m=content&a=introduce", null, handler);
	}

	// 鑰佸笀鐨凢AQ闂瓟
	public static void Sof_Info(AsyncHttpResponseHandler handler) {
		myPost("/?m=soft_info", null, handler);
	}

	// 鐢佃瘽鏀剁缉鑰佸笀
	public static void Searth_Teather_Mob(String mob,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("mob", mob);
		myPost("/?m=search&a=s", params, handler);
	}

	// 鏉′欢鎼滅储
	public static void Searth_Teather_TiaoJian(String nickname, String school,
			String subjectId, String areaId, String sex,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("nickname", nickname);
		params.put("school", school);
		params.put("subjectId", subjectId);
		params.put("areaId", areaId);
		params.put("sex", sex);
		myPost("/?m=search&a=term-s", params, handler);
	}

	// 鍙栨秷闂滄敞
	public static void Qu_Xiao_GuanZhu(String uid,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("uid", uid);
		myGet("?m=unfans", params, handler);
	}

	// 娑堟伅閲嶇櫦
//	public static void ChongFa(String questionId, String teachUid,
//			AsyncHttpResponseHandler handler) {
//		RequestParams params = new RequestParams();
//		params.put("questionId", questionId);
//		params.put("teachUid", teachUid);
//		myGet("?m=try_messge", params, handler);
//	}

	// 鍒犻櫎棰樺簱閲岃竟鐨勯
	public static void Delete_Bank(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myGet("?m=del_lib_question", params, handler);
	}

	// 娣诲姞鍒嗙被鎺ュ彛
	public static void Acquire_File(AsyncHttpResponseHandler handler) {
		myGet("?m=category", null, handler);
	}
	// 鑰佸斧绔笂鍌冲湒鐗囧拰瑾為煶
	public static void Mess_Save(String cid,String name,String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("cid", cid);
		params.put("name", name);
		params.put("questionId", questionId);
		myGet("?m=edit_question", params, handler);
	}
	// 淇濆瓨椤屽韩
	public static void Save_Ques_Count(String cid, String questionId,
			String name, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("cid", cid);
		params.put("name", name);
		params.put("questionId", questionId);
		myGet("?m=category", params, handler);
	}
	// 淇濆瓨椤屽韩
	public static void Save_TiKu(String cid,String name,String questionId,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("cid", cid);
		params.put("name", name);
		params.put("questionId", questionId);
		myPost("?m=save2lib", params, handler);
	}
	// 鏌ョ湅棰樺簱鏁版嵁
	public static void Look_TiKu(AsyncHttpResponseHandler handler) {
		myGet("/?m=lib", null, handler);
	}

	// 鍒犻櫎鍒嗙被鏂囦欢澶癸紙1锛?
	public static void Delete_File(String cid, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("cid", cid);
		myPost("?m=category&a=del", params, handler);
	}
	// 鍓靛缓鏂囦欢澶?
	public static void Creat_File(String fileName,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("name", fileName);
		myPost("?m=category&a=add", params, handler);
	}
	//   鍒櫎姣忎竴閬撻瑁忛潰鐨勮祫婧?
	public static void Delete_Topic(String resId,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("resId", resId);
		myGet("?m=del_lib_res", params, handler);
	}
	// 鍒櫎浜岀骇鏂囦欢澶?
	public static void Delete_Topic_Resource(String questionId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("?m=del_lib_question", params, handler);
	}
//	public static void Delete_Bank(String questionId,
//			AsyncHttpResponseHandler handler) {
//		RequestParams params = new RequestParams();
//		params.put("questionId", questionId);
//		myGet("?m=del_lib_question", params, handler);
//	}
	// 鑰佸笀鍏戞崲鐜伴噾
	public static void DuihuanGif(AsyncHttpResponseHandler handler) {
		myGet("?m=points&types=use", null, handler);
	}
	// 鑰佸笀鍏戞崲璁板綍
	public static void DuihuanRecord(AsyncHttpResponseHandler handler) {
		myGet("?m=points&types=cash", null, handler);
	}
	// 鑾峰彇閾惰鍒楄〃
	public static void getBankList(AsyncHttpResponseHandler handler) {
		myGet("?m=bank_list", null, handler);
	}
	// 鑾峰彇绀煎搧鍒楄〃
	public static void getGiftList(String page, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("page", page);
		myPost("?m=gift", params, handler);
	}
	// 鎴戠殑瀛︾敓
	public static void getStu_Info(AsyncHttpResponseHandler handler) {
		myPost("?m=mystudent", null, handler);
	}
	// 瀛︾敓绔秷鎭垹闄?
	public static void Dele_Mess(String messge_id,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("messge_id", messge_id);
		myPost("?m=del_messge", params, handler);
	}
	/**
	 * 瀛︾敓 laos鏇存敼淇℃伅
	 */
	public static void Save_Info(Update_User_Info user_info, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("name", user_info.getName());
		params.put("nickname", user_info.getNickname());
		params.put("aId", user_info.getaId());
		params.put("birthday", user_info.getBirthday());
		params.put("info",user_info.getInfo());
		params.put("school", user_info.getSchool());
		params.put("subjectId", user_info.getSubjectId());
		params.put("fromGradeId", user_info.getFromGradeId());
		params.put("toGradeId", user_info.getToGradeId());
		params.put("old_pwd",user_info.getOld_pwd());
		params.put("pwd",user_info.getPwd());
		params.put("types", user_info.getTypes());
		params.put("icon", user_info.getIcon());
		params.put("sex",user_info.getSex());
		params.put("Paper",user_info.getPaper());
		params.put("email",user_info.getEmail());
		params.put("gradeId",user_info.getGradeId());
		myPost("?m=update_user_info", params, handler);
	}
	//鑰佸笀绔? 鎴戠殑鏃惰
	public static void save_teask_icon(com.yshow.shike.entity.User_Info user_info, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("fromGradeId", user_info.getFromGradeId());
		params.put("toGradeId", user_info.getToGradeId());
		params.put("icon", user_info.getIcon());
		myPost("?m=update_user_info", params, handler);
	}
	// 閲嶇疆瀵嗙爜
	public static void Reset_Password(String mob, String vcodeRes,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("mob", mob);
		params.put("vcodeRes", vcodeRes);
		myPost("/?m=change_pwd", params, handler);
	}
	// 鑷姩娉ㄥ唽鐧婚檰
	public static void AuTo_log(String mac, String ckey, String time,
			String key, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("mac", mac);
		params.put("ckey", ckey);
		params.put("t", time);
		params.put("key", key);
		myPost("/?m=auto_login", params, handler);
	}
	// 瀛︾敓鑷姩鐧诲綍
	public static void auto_Info(String nickname, String gradeId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("nickname", nickname);
		params.put("gradeId", gradeId);
		myPost("?m=update_user_info", params, handler);
	}
	// 閫€鍑虹櫥褰?
	public static void Back_Login(AsyncHttpResponseHandler handler) {
		myPost("/?m=login&a=logout", null, handler);
	}
	// 鍦ㄧ嚎鑰佸笀
	public static void OnLine_Tea(String page, String subjectId,
			AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("page", page);
		params.put("subjectId", subjectId);
		myPost("/?m=online_teacher", params, handler);
	}
	// 娑堟伅鏌ョ湅
	public static void Look_Mess(String questionId,
			AsyncHttpResponseHandler handler) {
		myPost("/?m=read_messge&questionId=" + questionId, null, handler);
	}

	// 涓婁紶鏁欏笀鑱屾牸璇?
	public static void Up_Loading_Tea(Bitmap bitmap, String path,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
		InputStream isBm = new ByteArrayInputStream(baos.toByteArray());
		params.put("filename", isBm, path + ".png");
		myPost("/?m=file&a=upload", params, handler);
	}
	// 鎷掓帴瀛︾敓鍙戠粰鑰佸笀鐨勯鐩?
	public static void record_Stu(String questionId,AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("questionId", questionId);
		myPost("/?m=reject_task", params, handler);
	}
	//鏀粯
	public static void Get_Comm_Info(String itemid,AsyncHttpResponseHandler handler) {
		myPost("/alipay/?m=create&itemId=" + itemid + "&Platform=android", null,handler);
	}
	// 鍏戞崲鐜伴噾
	public static void exchange_money(String bankId,String bankAddr,String bankNO, AsyncHttpResponseHandler handler) {
		RequestParams params = new RequestParams();
		params.put("bankId", bankId);
		params.put("bankAddr", bankAddr);
		params.put("bankNO", bankNO);
		myPost("/?m=bank", params, handler);
	}
	// 鍏戞崲鍟嗗搧
    public static void exchange_shop(String receiver,String phone,String addressee, AsyncHttpResponseHandler handler){
		RequestParams params = new RequestParams();
		params.put("receiver", receiver);
		params.put("phone",phone);
		params.put("addressee",addressee);
		myPost("/?m=addressee", params, handler);
    }
}